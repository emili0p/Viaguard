<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Aceler√≥metro</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>üìä Dashboard de Datos del Aceler√≥metro</h1>
            <div class="stats">
                <div class="stat-card">
                    <h3>Total de lecturas</h3>
                    <p id="totalReadings"><%= stats.totalReadings %></p>
                </div>
                <div class="stat-card">
                    <h3>Magnitud promedio</h3>
                    <p id="avgMagnitude"><%= stats.avgMagnitude.toFixed(2) %> m/s¬≤</p>
                </div>
                <div class="stat-card">
                    <h3>Magnitud m√°xima</h3>
                    <p id="maxMagnitude"><%= stats.maxMagnitude.toFixed(2) %> m/s¬≤</p>
                </div>
            </div>
        </header>

        <div class="charts-container">
            <div class="chart-card full-width">
                <h2>Aceleraci√≥n (X, Y, Z)</h2>
                <canvas id="accelerationChart"></canvas>
            </div>
            
            <div class="chart-card">
                <h2>Magnitud de Aceleraci√≥n</h2>
                <canvas id="magnitudeChart"></canvas>
            </div>
            
            <div class="chart-card">
                <h2>Giroscopio (X, Y, Z)</h2>
                <canvas id="gyroscopeChart"></canvas>
            </div>

            <div class="chart-card">
                <h2>Nivel de Vibraci√≥n</h2>
                <canvas id="vibrationChart"></canvas>
            </div>

            <div class="chart-card">
                <h2>Actividad Detectada</h2>
                <canvas id="activityChart"></canvas>
            </div>
        </div>

        <div class="controls">
            <button onclick="generateTestData()">üé≤ Generar Datos de Prueba</button>
            <button onclick="startAutoUpdate()">üîÑ Actualizaci√≥n Autom√°tica</button>
            <button onclick="stopAutoUpdate()">‚èπÔ∏è Detener Actualizaci√≥n</button>
            <button onclick="clearData()">üóëÔ∏è Limpiar Datos</button>
        </div>

        <div class="realtime-data">
            <h2>üì° Datos en Tiempo Real</h2>
            <div id="currentData">
                <p>Esperando datos...</p>
            </div>
        </div>
    </div>

    <script>
        // Datos iniciales - verificar que existan
        const accelerationData = <%= accelerationData || '[]' %>;
        const gyroscopeData = <%= gyroscopeData || '[]' %>;

        // Configuraci√≥n de gr√°ficos
        const charts = {
            acceleration: null,
            magnitude: null,
            gyroscope: null,
            vibration: null,
            activity: null
        };

        let autoUpdateInterval;

        // Inicializar gr√°ficos
        function initializeCharts() {
            const timeLabels = accelerationData.length > 0 ? 
                accelerationData.map(d => new Date(d.timestamp).toLocaleTimeString()) : 
                [];

            // Gr√°fico de aceleraci√≥n
            const accelerationCtx = document.getElementById('accelerationChart');
            if (accelerationCtx) {
                charts.acceleration = new Chart(accelerationCtx, {
                    type: 'line',
                    data: {
                        labels: timeLabels,
                        datasets: [
                            {
                                label: 'Aceleraci√≥n X',
                                data: accelerationData.map(d => d ? d.x : 0),
                                borderColor: 'rgb(255, 99, 132)',
                                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                tension: 0.4
                            },
                            {
                                label: 'Aceleraci√≥n Y',
                                data: accelerationData.map(d => d ? d.y : 0),
                                borderColor: 'rgb(54, 162, 235)',
                                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                tension: 0.4
                            },
                            {
                                label: 'Aceleraci√≥n Z',
                                data: accelerationData.map(d => d ? d.z : 0),
                                borderColor: 'rgb(75, 192, 192)',
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                tension: 0.4
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                title: { display: true, text: 'Aceleraci√≥n (m/s¬≤)' }
                            },
                            x: {
                                title: { display: true, text: 'Tiempo' }
                            }
                        }
                    }
                });
            }

            // Gr√°fico de magnitud
            const magnitudeCtx = document.getElementById('magnitudeChart');
            if (magnitudeCtx) {
                charts.magnitude = new Chart(magnitudeCtx, {
                    type: 'line',
                    data: {
                        labels: timeLabels,
                        datasets: [{
                            label: 'Magnitud',
                            data: accelerationData.map(d => d ? d.magnitude : 0),
                            borderColor: 'rgb(153, 102, 255)',
                            backgroundColor: 'rgba(153, 102, 255, 0.2)',
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                title: { display: true, text: 'Magnitud (m/s¬≤)' }
                            }
                        }
                    }
                });
            }

            // Gr√°fico de giroscopio
            const gyroscopeCtx = document.getElementById('gyroscopeChart');
            if (gyroscopeCtx) {
                const gyroTimeLabels = gyroscopeData.length > 0 ? 
                    gyroscopeData.map(d => new Date(d.timestamp).toLocaleTimeString()) : 
                    [];

                charts.gyroscope = new Chart(gyroscopeCtx, {
                    type: 'line',
                    data: {
                        labels: gyroTimeLabels,
                        datasets: [
                            {
                                label: 'Giroscopio X',
                                data: gyroscopeData.map(d => d ? d.x : 0),
                                borderColor: 'rgb(255, 159, 64)',
                                backgroundColor: 'rgba(255, 159, 64, 0.2)',
                                tension: 0.4
                            },
                            {
                                label: 'Giroscopio Y',
                                data: gyroscopeData.map(d => d ? d.y : 0),
                                borderColor: 'rgb(255, 205, 86)',
                                backgroundColor: 'rgba(255, 205, 86, 0.2)',
                                tension: 0.4
                            },
                            {
                                label: 'Giroscopio Z',
                                data: gyroscopeData.map(d => d ? d.z : 0),
                                borderColor: 'rgb(201, 203, 207)',
                                backgroundColor: 'rgba(201, 203, 207, 0.2)',
                                tension: 0.4
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                title: { display: true, text: 'Velocidad angular (rad/s)' }
                            }
                        }
                    }
                });
            }
        }

        // Funciones de control
        async function generateTestData() {
            try {
                const response = await fetch('/api/generate-test-data', { method: 'POST' });
                const result = await response.json();
                alert(result.message);
                loadData();
            } catch (error) {
                console.error('Error generating test data:', error);
                alert('Error al generar datos de prueba');
            }
        }

        async function loadData() {
            try {
                const response = await fetch('/api/sensor-data');
                if (!response.ok) {
                    throw new Error('Error en la respuesta del servidor');
                }
                const data = await response.json();
                updateCharts(data);
                updateStats();
                if (data.length > 0) {
                    updateRealtimeData(data[data.length - 1]);
                }
            } catch (error) {
                console.error('Error loading data:', error);
            }
        }

        function updateCharts(data) {
            if (!data || data.length === 0) return;

            const timestamps = data.map(d => new Date(d.timestamp).toLocaleTimeString());
            
            // Actualizar gr√°fico de aceleraci√≥n
            if (charts.acceleration) {
                charts.acceleration.data.labels = timestamps;
                charts.acceleration.data.datasets[0].data = data.map(d => d.acceleration.x);
                charts.acceleration.data.datasets[1].data = data.map(d => d.acceleration.y);
                charts.acceleration.data.datasets[2].data = data.map(d => d.acceleration.z);
                charts.acceleration.update();
            }

            // Actualizar gr√°fico de magnitud
            if (charts.magnitude) {
                charts.magnitude.data.labels = timestamps;
                charts.magnitude.data.datasets[0].data = data.map(d => d.magnitude);
                charts.magnitude.update();
            }

            // Actualizar gr√°fico de giroscopio
            if (charts.gyroscope) {
                charts.gyroscope.data.labels = timestamps;
                charts.gyroscope.data.datasets[0].data = data.map(d => d.gyroscope.x);
                charts.gyroscope.data.datasets[1].data = data.map(d => d.gyroscope.y);
                charts.gyroscope.data.datasets[2].data = data.map(d => d.gyroscope.z);
                charts.gyroscope.update();
            }
        }

        async function updateStats() {
            try {
                const response = await fetch('/api/stats');
                if (!response.ok) {
                    throw new Error('Error al obtener estad√≠sticas');
                }
                const stats = await response.json();
                
                if (stats) {
                    document.getElementById('totalReadings').textContent = stats.count || 0;
                    document.getElementById('avgMagnitude').textContent = 
                        (stats.avgMagnitude || 0).toFixed(2) + ' m/s¬≤';
                    document.getElementById('maxMagnitude').textContent = 
                        (stats.maxMagnitude || 0).toFixed(2) + ' m/s¬≤';
                }
            } catch (error) {
                console.error('Error updating stats:', error);
            }
        }

        function updateRealtimeData(latestData) {
            if (!latestData) return;
            
            const html = `
                <div class="realtime-card">
                    <h3>√öltima lectura: ${new Date(latestData.timestamp).toLocaleTimeString()}</h3>
                    <p><strong>Aceleraci√≥n:</strong> X: ${latestData.acceleration.x.toFixed(2)}, Y: ${latestData.acceleration.y.toFixed(2)}, Z: ${latestData.acceleration.z.toFixed(2)} m/s¬≤</p>
                    <p><strong>Giroscopio:</strong> X: ${latestData.gyroscope.x.toFixed(2)}, Y: ${latestData.gyroscope.y.toFixed(2)}, Z: ${latestData.gyroscope.z.toFixed(2)} rad/s</p>
                    <p><strong>Magnitud:</strong> ${latestData.magnitude.toFixed(2)} m/s¬≤</p>
                    <p><strong>Actividad:</strong> ${latestData.activity}</p>
                    <p><strong>Vibraci√≥n:</strong> ${latestData.vibrationLevel}</p>
                    <p><strong>Bater√≠a:</strong> ${latestData.batteryLevel}%</p>
                </div>
            `;
            
            document.getElementById('currentData').innerHTML = html;
        }

        function startAutoUpdate() {
            stopAutoUpdate();
            autoUpdateInterval = setInterval(loadData, 2000);
            console.log('Actualizaci√≥n autom√°tica iniciada');
        }

        function stopAutoUpdate() {
            if (autoUpdateInterval) {
                clearInterval(autoUpdateInterval);
                console.log('Actualizaci√≥n autom√°tica detenida');
            }
        }

        async function clearData() {
            if (confirm('¬øEst√°s seguro de que quieres eliminar todos los datos?')) {
                try {
                    const response = await fetch('/api/clear-data', { method: 'DELETE' });
                    const result = await response.json();
                    alert(result.message);
                    loadData();
                } catch (error) {
                    console.error('Error clearing data:', error);
                    alert('Error al limpiar datos');
                }
            }
        }

        // Inicializar cuando el DOM est√© listo
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Dashboard inicializado');
            initializeCharts();
            startAutoUpdate();
            
            // Cargar datos iniciales
            loadData();
        });

        // Manejar errores no capturados
        window.addEventListener('error', function(e) {
            console.error('Error global:', e.error);
        });
    </script>
</body>
</html>